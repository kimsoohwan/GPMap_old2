#if 1

// STL
#include <string>
#include <vector>
#include <sstream>

// GPMap
#include "io/io.hpp"								// loadPointClouds, savePointClouds, loadSensorPositionList
#include "octomap/octomap.hpp"				// Octomap

using namespace GPMap;

int main(int argc, char** argv)
{
	// setting
	const size_t NUM_DATA = 8; 
	const std::string strOutputDataFolder("../../data/output/bunny/");
	const std::string strFileNames_[]	= {"gpmap_meanZero_covSEiso_batch_BCM_der", 
														"gpmap_meanZero_covSEiso_batch_BCM_func",
														"gpmap_meanZero_covSEiso_batch_iBCM_der", 
														"gpmap_meanZero_covSEiso_batch_iBCM_func",
														"gpmap_meanZero_covSEiso_incremental_BCM_der", 
														"gpmap_meanZero_covSEiso_incremental_BCM_func",
														"gpmap_meanZero_covSEiso_incremental_iBCM_der",
														"gpmap_meanZero_covSEiso_incremental_iBCM_func"};
	StringList strFileNames(strFileNames_, strFileNames_ + NUM_DATA); 

	// for each case
	for(size_t i = 0; i < strFileNames.size(); i++)
	{
		std::cout << "===================[ " << strFileNames[i] << " ]===================" << std::endl;

		// log file
		std::string strLogFilePath = strOutputDataFolder + strFileNames[i] + "_visualization.log";
		LogFile logFile;
		logFile.open(strLogFilePath);

		// setting
		const double	RESOLUTION = 0.001;
		//pcl::PointCloud<pcl::PointXYZI>::Ptr pPointCloud;
		//loadPointCloud<pcl::PointXYZI>(pPointCloud, strOutputDataFolder + strFileNames[i] + "_PointXYZI.pcd");
		pcl::PointCloud<pcl::PointNormal>::Ptr pPointCloud;
		loadPointCloud<pcl::PointNormal>(pPointCloud, strOutputDataFolder + strFileNames[i] + "_PointNormal.pcd");

		// train
		Octomap<NO_COLOR> octomap_train(RESOLUTION, *pPointCloud, std::numeric_limits<float>::min(), std::numeric_limits<float>::max());
		float PLSC_mean = 0.05f;
		float PLSC_var  = 0.0001f;
		const float sumNegLOO = octomap_train.train(pPointCloud, PLSC_mean, PLSC_var, 1000);
		std::cout << "PLSC_mean = " << expf(PLSC_mean) << std::endl;	// sum_neg_log_occupied only: 1.292437
		std::cout << "PLSC_var = "  << expf(PLSC_var)  << std::endl;	// sum_neg_log_occupied only: 1.000087
		std::cout << "sumNegLOO = "  << sumNegLOO  << std::endl;			// sum_neg_log_occupied = 2.286207

		// octree
		//Octomap<NO_COLOR> octomap(RESOLUTION, *pPointCloud, 0, 1);
		Octomap<NO_COLOR> octomap(RESOLUTION, *pPointCloud);
		octomap.save(strOutputDataFolder + strFileNames[i]);

		// color octree
		//Octomap<COLOR>		color_octomap(RESOLUTION, *pPointCloud, 0, 1); 
		Octomap<COLOR>		color_octomap(RESOLUTION, *pPointCloud); 
		color_octomap.save(strOutputDataFolder + strFileNames[i] + "_color");

		// color octree - specific
		while(true)
		{
			// thresholds for color
			float minVar; std::cout << "min var thld: "; std::cin >> minVar;
			float maxVar; std::cout << "max var thld: "; std::cin >> maxVar;
			if(minVar == maxVar) break;

			// file name
			std::stringstream ss;
			ss.precision(std::numeric_limits<float>::digits10);
			ss << strOutputDataFolder << strFileNames[i] << "_color_"
																		<< "_min_var_" << std::scientific << minVar
																		<< "_max_var_" << std::scientific << maxVar;

			// color octree
			Octomap<COLOR>		color_octomap2(RESOLUTION, *pPointCloud, 0, 1, minVar, maxVar); 
			color_octomap2.save(ss.str());
		}

		std::cout << std::endl << std::endl;
	}

	// [6] evaluation
	//logFile << "============= Evaluation =============" << std::endl;
	//unsigned int num_points, num_voxels_correct, num_voxels_wrong, num_voxels_unknown;
	//octomap.evaluate<pcl::PointXYZ, pcl::PointXYZ>(hitPointCloudPtrList, sensorPositionList,
	//															  num_points, num_voxels_correct, num_voxels_wrong, num_voxels_unknown);
	//logFile << "Number of hit points: " << num_points << std::endl;
	//logFile << "Number of correct voxels: " << num_voxels_correct << std::endl;
	//logFile << "Number of wrong voxels: " << num_voxels_wrong << std::endl;
	//logFile << "Number of unknown voxels: " << num_voxels_unknown << std::endl;
	//logFile << "Correct rate (correct/(correct+wrong)): " << static_cast<float>(num_voxels_correct)/static_cast<float>(num_voxels_correct+num_voxels_wrong) << std::endl;

	//// save
	//while(true)
	//{
	//	float occupancyThreshold; std::cout << "Occupancy Threshold: "; std::cin >> occupancyThreshold; std::cout << occupancyThreshold << std::endl;
	//	std::stringstream ss;
	//	ss << strOutputDataFolder << "gpmap_bunny_upto_" << i << "_" << occupancyThreshold;
	//	gpmap.saveAsOctomap(ss.str(), occupancyThreshold, false);
	//}

	system("pause");
}

#endif
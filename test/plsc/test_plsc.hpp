#ifndef _TEST_PLSC_HPP_
#define _TEST_PLSC_HPP_

// Google Test
#include "gtest/gtest.h"

// GPMap
#include "plsc/plsc.hpp"
using namespace GPMap;

TEST(PLSC, NORMCDF)
{
	// size
	const int N = 161;

	// X
	Vector X(N);
	X << -8.000000000000000f, -7.900000000000000f, -7.800000000000000f, -7.700000000000000f, -7.600000000000000f, -7.500000000000000f, -7.400000000000000f, -7.300000000000000f, -7.200000000000000f, -7.100000000000000f, -7.000000000000000f, -6.900000000000000f, -6.800000000000000f, -6.700000000000000f, -6.600000000000000f, -6.500000000000000f, -6.400000000000000f, -6.300000000000000f, -6.200000000000000f, -6.100000000000000f, -6.000000000000000f, -5.900000000000000f, -5.800000000000000f, -5.699999999999999f, -5.600000000000000f, -5.500000000000000f, -5.400000000000000f, -5.300000000000000f, -5.199999999999999f, -5.100000000000000f, -5.000000000000000f, -4.900000000000000f, -4.800000000000000f, -4.699999999999999f, -4.600000000000000f, -4.500000000000000f, -4.400000000000000f, -4.300000000000000f, -4.199999999999999f, -4.100000000000000f, -4.000000000000000f, -3.900000000000000f, -3.800000000000000f, -3.700000000000000f, -3.600000000000000f, -3.500000000000000f, -3.400000000000000f, -3.300000000000000f, -3.199999999999999f, -3.100000000000000f, -3.000000000000000f, -2.900000000000000f, -2.800000000000000f, -2.699999999999999f, -2.600000000000000f, -2.500000000000000f, -2.400000000000000f, -2.300000000000000f, -2.199999999999999f, -2.100000000000000f, -2.000000000000000f, -1.900000000000000f, -1.800000000000000f, -1.699999999999999f, -1.600000000000000f, -1.500000000000000f, -1.400000000000000f, -1.300000000000000f, -1.199999999999999f, -1.100000000000000f, -1.000000000000000f, -0.899999999999999f, -0.800000000000000f, -0.699999999999999f, -0.600000000000000f, -0.500000000000000f, -0.399999999999999f, -0.300000000000000f, -0.199999999999999f, -0.100000000000000f,  0.000000000000000f,  0.100000000000000f,  0.199999999999999f,  0.300000000000000f,  0.399999999999999f,  0.500000000000000f,  0.600000000000000f,  0.699999999999999f,  0.800000000000000f,  0.899999999999999f,  1.000000000000000f,  1.100000000000000f,  1.199999999999999f,  1.300000000000000f,  1.400000000000000f,  1.500000000000000f,  1.600000000000000f,  1.699999999999999f,  1.800000000000000f,  1.900000000000000f,  2.000000000000000f,  2.100000000000000f,  2.199999999999999f,  2.300000000000000f,  2.400000000000000f,  2.500000000000000f,  2.600000000000000f,  2.699999999999999f,  2.800000000000000f,  2.900000000000000f,  3.000000000000000f,  3.100000000000000f,  3.199999999999999f,  3.300000000000000f,  3.400000000000000f,  3.500000000000000f,  3.600000000000000f,  3.700000000000000f,  3.800000000000000f,  3.900000000000000f,  4.000000000000000f,  4.100000000000000f,  4.199999999999999f,  4.300000000000000f,  4.400000000000000f,  4.500000000000000f,  4.600000000000000f,  4.699999999999999f,  4.800000000000000f,  4.900000000000000f,  5.000000000000000f,  5.100000000000000f,  5.199999999999999f,  5.300000000000000f,  5.400000000000000f,  5.500000000000000f,  5.600000000000000f,  5.699999999999999f,  5.800000000000000f,  5.900000000000000f,  6.000000000000000f,  6.100000000000000f,  6.200000000000000f,  6.300000000000000f,  6.400000000000000f,  6.500000000000000f,  6.600000000000000f,  6.700000000000000f,  6.800000000000000f,  6.900000000000000f,  7.000000000000000f,  7.100000000000000f,  7.200000000000000f,  7.300000000000000f,  7.400000000000000f,  7.500000000000000f,  7.600000000000000f,  7.700000000000000f,  7.800000000000000f,  7.900000000000000f,  8.000000000000000f;

	// Normal cumulative distribution function 
	Vector P(N);
	P <<  0.000000000000001f,  0.000000000000001f,  0.000000000000003f,  0.000000000000007f,  0.000000000000015f,  0.000000000000032f,  0.000000000000068f,  0.000000000000144f,  0.000000000000301f,  0.000000000000624f,  0.000000000001280f,  0.000000000002600f,  0.000000000005231f,  0.000000000010421f,  0.000000000020558f,  0.000000000040160f,  0.000000000077688f,  0.000000000148823f,  0.000000000282316f,  0.000000000530342f,  0.000000000986588f,  0.000000001817508f,  0.000000003315746f,  0.000000005990371f,  0.000000010717590f,  0.000000018989562f,  0.000000033320449f,  0.000000057901340f,  0.000000099644263f,  0.000000169826741f,  0.000000286651572f,  0.000000479183277f,  0.000000793328152f,  0.000001300807454f,  0.000002112454702f,  0.000003397673125f,  0.000005412543908f,  0.000008539905471f,  0.000013345749016f,  0.000020657506913f,  0.000031671241833f,  0.000048096344018f,  0.000072348043925f,  0.000107799733477f,  0.000159108590158f,  0.000232629079036f,  0.000336929265677f,  0.000483424142384f,  0.000687137937916f,  0.000967603213218f,  0.001349898031630f,  0.001865813300384f,  0.002555130330428f,  0.003466973803041f,  0.004661188023719f,  0.006209665325776f,  0.008197535924596f,  0.010724110021676f,  0.013903447513499f,  0.017864420562817f,  0.022750131948179f,  0.028716559816002f,  0.035930319112926f,  0.044565462758543f,  0.054799291699558f,  0.066807201268858f,  0.080756659233771f,  0.096800484585610f,  0.115069670221708f,  0.135666060946383f,  0.158655253931457f,  0.184060125346760f,  0.211855398583397f,  0.241963652223073f,  0.274253117750074f,  0.308537538725987f,  0.344578258389676f,  0.382088577811047f,  0.420740290560897f,  0.460172162722971f,  0.500000000000000f,  0.539827837277029f,  0.579259709439103f,  0.617911422188953f,  0.655421741610324f,  0.691462461274013f,  0.725746882249926f,  0.758036347776927f,  0.788144601416603f,  0.815939874653240f,  0.841344746068543f,  0.864333939053617f,  0.884930329778292f,  0.903199515414390f,  0.919243340766229f,  0.933192798731142f,  0.945200708300442f,  0.955434537241457f,  0.964069680887074f,  0.971283440183998f,  0.977249868051821f,  0.982135579437183f,  0.986096552486501f,  0.989275889978324f,  0.991802464075404f,  0.993790334674224f,  0.995338811976281f,  0.996533026196959f,  0.997444869669572f,  0.998134186699616f,  0.998650101968370f,  0.999032396786782f,  0.999312862062084f,  0.999516575857616f,  0.999663070734323f,  0.999767370920964f,  0.999840891409842f,  0.999892200266523f,  0.999927651956075f,  0.999951903655982f,  0.999968328758167f,  0.999979342493087f,  0.999986654250984f,  0.999991460094529f,  0.999994587456092f,  0.999996602326875f,  0.999997887545298f,  0.999998699192546f,  0.999999206671848f,  0.999999520816723f,  0.999999713348428f,  0.999999830173259f,  0.999999900355737f,  0.999999942098660f,  0.999999966679551f,  0.999999981010438f,  0.999999989282410f,  0.999999994009629f,  0.999999996684254f,  0.999999998182492f,  0.999999999013412f,  0.999999999469658f,  0.999999999717684f,  0.999999999851177f,  0.999999999922311f,  0.999999999959840f,  0.999999999979442f,  0.999999999989579f,  0.999999999994769f,  0.999999999997400f,  0.999999999998720f,  0.999999999999376f,  0.999999999999699f,  0.999999999999856f,  0.999999999999932f,  0.999999999999968f,  0.999999999999985f,  0.999999999999993f,  0.999999999999997f,  0.999999999999999f,  0.999999999999999f;

	// check
	for(size_t i = 0; i < N; i++)
	{
		//EXPECT_EQ(P(i), normcdf(X(i)));
		EXPECT_TRUE(abs(P(i) - normcdf(X(i))) < 1e-6);
	}
}

#endif